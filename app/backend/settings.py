"""
Django settings for hello_django project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get("SECRET_KEY", "foo")

DEBUG = int(os.environ.get("DEBUG", default=0))

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", '127.0.0.1 localhost').split(" ")
BASE_URL = ALLOWED_HOSTS[-1]
LOGIN_URL = '/login/'
# ? assigning env variables here not working
DJANGO_SUPERUSER_PASSWORD = os.environ.get("DJANGO_SUPERUSER_PASSWORD")
DJANGO_SUPERUSER_USERNAME = os.environ.get("DJANGO_SUPERUSER_USERNAME")
DJANGO_SUPERUSER_EMAIL = os.environ.get("DJANGO_SUPERUSER_EMAIL")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # third party
    'rest_framework',
    'rest_framework.authtoken',
    'djoser', # djoser provides a set of DRF views to handle basic actions such as registration, login, logout, password reset and account activation.
    # own
    "uploadforpredict",
    "uploadforpredict_rest",
    "taxonomy",
    "taxonomy_rest",
    "predmodel",
    "predmodel_rest",
    "image",
    "imageClassification",
    "imageClassification_rest",
    "frontend",
]

#this sets the base url based on the request. otherwise urls returned would use the locally defined host e.g.: localhost:8000
#note nginx also needs to be configured to forward the header
USE_X_FORWARDED_HOST=True

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': ['rest_framework.renderers.JSONRenderer',],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_THROTTLE_CLASSES': [
        'backend.throttles.BurstRateThrottle',
        'backend.throttles.SustainedRateThrottle',
        'backend.throttles.AnonBurstRateThrottle',
        'backend.throttles.AnonSustainedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon_burst':'2/minute',
        'anon_sustained':'10/hour',
        'burst': '10/second',
        'sustained':'100000/day',
    },
    'DEFAULT_AUTHENTICATION_CLASSES':[
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS':[
        'django_filters.rest_framework.DjangoFilterBackend']
}

# API Settings: only show browsable api while in DEBUG

# AUTH_USER_MODEL="user_rest.CustomUser"

# https://djoser.readthedocs.io/en/latest/settings.html
DJOSER = {
    'USER_CREATE_PASSWORD_RETYPE' : True,
    'HIDE_USERS' : True, # users can only see their own user account unless
    # 'LOGIN_FIELD': 'email',
    # 'SERIALIZERS':{
    #     'user_create': 'user_rest.serializers.CustomUserSerializer',
    #     'user': 'user_rest.serializers.CustomUserSerializer'
    # }
}


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_USE_TLS = False
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "speseefy@gmail.com")
EMAIL_CONTACT_LIST = os.environ.get("EMAIL_CONTACT_LIST","barry.sunderland@librarylab.ethz.ch").split(" ")



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    "staticfiles/images",
    "staticfiles/css",
    "staticfiles/admin",
    "staticfiles/rest_framework",
    # '/var/www/static/',
]

# files to populate the database with
FIXTURES_DIRS = ["fixturefiles"]
# stores files for static serving
MEDIA_URL = os.environ.get("HOST_URL", "localhost:8000") + '/media/' 
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

# use seperate folders for example images and uploaded images
MEDIA_UPLOAD_FOLDER = os.path.join(MEDIA_ROOT, "upload")
MEDIA_EXAMPLE_FOLDER = os.path.join(MEDIA_ROOT, "example")

MEDIA_BASE_URL = BASE_URL + MEDIA_URL
EXAMPLE_IMAGES_DIR = os.path.join(BASE_DIR, 'backend/assets','example_images')

# settings related to predictions

TENSORFLOW_SERVING_BASE_URL = "http://localhost:8501/v1/models/{model_name}/versions/{model_version}:predict"

# number of top results to return 
NUM_RESULTS = 5